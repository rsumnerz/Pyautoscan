'''
The MIT License (MIT)

Copyright (c) 2013 Nicholas Juszczak

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
'''
'''
<<<<<<< HEAD:Malwarebytes.py
Script for automating the running of MalwareBytes
quick scan, full scan, and update
=======
Script for automating the run of Malwarebytes
>>>>>>> 6c5bd96d02642efb4442c6ce09cbd6cb3691c8fa:Malwarebytes.py

Last Modified: July 31, 2013
'''

import pywinauto
import time
import sys
from pywinauto import application
from winsound import Beep

# Default values
args = {'executable':'',
        'update':False,
        'quick':False,
        'full':False }
# Logging
log = logging.getLogger()
ch = logging.StreamHandler(sys.stdout)
ch.setFormatter(logging.Formatter('%(message)s'))
log.addHandler(ch)
log.setLevel(logging.INFO)

# cli parameter parsing
if len(sys.argv) > 1:
    for index,arg in enumerate(sys.argv):
        if arg == '-e' or arg == '--executable':
            args['executable'] = sys.argv[index + 1]
        if arg == '-u' or arg == '--update':
            args['update'] = True
        if arg == '-q' or arg == '--quick':
            args['quick'] = True
            args['full'] = False
        if arg == '-f' or arg == '--full':
            args['full'] = True
            args['quick'] = False
        if arg == '-l' or arg == '--logfile':
            hdlr = logging.FileHandler(sys.argv[index + 1])
            formatter = logging.Formatter('%(asctime)s %(levelname)s %(message)s')
            hdlr.setFormatter(formatter)
            log.addHandler(hdlr)
            log.setLevel(logging.INFO)
        if arg == '-h' or arg == '--help':
            print 'Options are:'
            print '\t-e or --executable <path> | Path to MWB executable'
            print '\t-u or --update | Update MWB'
            print '\t-q or --quick | Quick scan (default)'
            print '\t-f or --full | Full scan'
            print '\t-l or --logfile <path> | log file'
            print '\t-h or --help | This screen'
            sys.exit(0)

print 'Remember, -h or --help for help!\n'
beepFreq = 2500
beepDur = 1000

def beep():
    try:
        Beep(beepFreq, beepDur)
    except:
        print 'Unable to beep... :('

# Run a update
def runUpdate():
    print "Updating MWB..."
    try:
        app = application.Application().start_(args['executable'] + ' /update')
    except:
        print 'Error starting program...'
        beep()
        sys.exit(-1)

    # Attempt to connect to MWB
    dlg = None
    attempts = 30
    while dlg == None and attempts > 0:
        try:
            dlg = app.connect_(title_re="Updating .*")
        except:
            attempts -= 1
            time.sleep(2)

    if dlg == None:
        print "Error connecting to MalwareBytes"
        sys.exit(-1)
    else:
        print 'Successfully connected to MWB'

    # Loop until update is finished
    attempts = 120
    successful = False
    while attempts > 0 and (not successful):
        # keep checking if close dialog has not appeared
        if not app.dlg.Static3.Exists():
            attempts -= 1
            time.sleep(2)
        # Error out if 'error' is found in dialog window
        elif 'error' in app.dlg.Static3.GetProperties()['Texts'][0]:
            print 'Error while updating MWB...'
            beep()
            break
        # finish if done
        elif 'You have the latest' in app.dlg.Static3.GetProperties()['Texts'][0]:
            print 'Already Updated'
            successful = True
            app.dlg.Button.Click()
            break
        elif 'successfully updated' in app.dlg.Static3.GetProperties()['Texts'][0]:
            print 'Update Successful'
            successful = True
            app.dlg.Button.Click()
            break
        # Updating, keep waiting
        else:
            attempts -= 1
            time.sleep(2)
    
    #if not successfully updated
    if not successful:
        beep()
        sys.exit(-1)
    

#If scan was chosen
def runScan():
    if args['quick']:
        print 'Running Quick Scan...'
        app = application.Application().start_(args['executable'] + " /scan")
    elif args['full']:
        print 'Running Full Scan...'
        app = application.Application().start_(args['executable'] + " /fullscan")

    #Check to see if it has started up correctly
    attempts = 30
    while not app['Malwarebytes Anti-Malware'].Exists() and attempts > 0:
        attempts -= 1
        time.sleep(2)

    if attempts == 0:
        print "Error: Quick Scan timed out starting..."
        beep()
        sys.exit(-1)

    print 'MWB scan started...'

    # Check to see if scan is done by checking for done popup window
    # 10 attempts is roughly a minute... might be way more
    if args['quick']:
        # About 25 minute scan time timout
        attempts = 250
    else:
        # About 4 hour scan time timeout
        attempts = 4000

    while (not app['Malwarebytes Anti-Malware'].Static3.Exists()) and attempts > 0:
        attempts -= 1
        time.sleep(6)

    if attempts == 0:
        print 'Error: Scan timed out scanning...'
        beep()
        sys.exit(-1)

    print 'Popup found'

    # Check dialog of popup window for successful completion
    if 'scan completed successfully' in app['Malwarebytes Anti-Malware'].Static3.GetProperties()['Texts'][0]:
        print 'Scan completed successfully'
        print 'Attempting to close MWB...'

        # continually try to click OK button
        attempts = 5
        while app['Malwarebytes Anti-Malware'].OKButton.Exists() and attempts > 0:
            app['Malwarebytes Anti-Malware'].OKButton.Click()
            attempts -= 1
            time.sleep(1)

        # If errors were shown
        if app['Malwarebytes Anti-Malware']['Show Results'].Exists():
            # continually try to click Show results to close app
            attempts = 5
            while app['Malwarebytes Anti-Malware']['Show Results'].Exists() and attempts > 0:
                app['Malwarebytes Anti-Malware']['Show Results'].Click()
                attempts -= 1
                time.sleep(1)

            # continually try to click remove selected to close app
            attempts = 5
            while app['Malwarebytes Anti-Malware']['Remove Selected'].Exists() and attempts > 0:
                app['Malwarebytes Anti-Malware']['Remove Selected'].Click()
                attempts -= 1
                time.sleep(1)

            # continually try to click yes to restart computer
            attempts = 5
            while app['Malwarebytes Anti-Malware'].Button.Exists() and attempts > 0:
                app['Malwarebytes Anti-Malware'].Button.Click()
                attempts -= 1
                time.sleep(1)

        # If either button still needs to be clicked we have a problem
        elif app['Malwarebytes Anti-Malware'].Exit.Exists() or app['Malwarebytes Anti-Malware'].OKButton.Exists():
            print "Failed to click one of the buttons, waiting for them to be manually closed..."
            while app['Malwarebytes Anti-Malware'].Exit.Exists():
                thread.sleep(5)

        print 'MWB windows successfully closed'

        #Try to kill the notepad log that opens at the end of the scan
        try:
            app.connect_(title_re='.* Notepad')
            app.kill_()
            print 'Notepad successfully closed'
        except:
            print 'No Notepad instances opened...'
    # Else we've had an error scanning...
    else:
        print 'Error Scanning...'
        beep()
        sys.exit(-1)


# Main
def main():
    if args['update']:
        runUpdate()
    if args['quick'] or args['full']:
        runScan()

if __name__ == '__main__':
    main()
    sys.exit(0)

